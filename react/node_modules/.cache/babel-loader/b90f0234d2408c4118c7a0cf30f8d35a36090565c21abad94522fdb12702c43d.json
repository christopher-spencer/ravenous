{"ast":null,"code":"const apiKey = process.env.YELP_API_KEY;\nconst Yelp = {\n  search(searchTerm, location, sortBy) {\n    return fetch(`http://localhost:3000/yelp/businesses/search?term=${searchTerm}&location=${location}&sort_by=${sortBy}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        return response.json().then(errorResponse => {\n          console.error('API error:', errorResponse);\n          throw new Error('API error');\n        });\n      }\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business => {\n          var _business$categories$;\n          return {\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address1,\n            city: business.location.city,\n            state: business.location.state,\n            zipCode: business.location.zip_code,\n            category: (_business$categories$ = business.categories[0]) === null || _business$categories$ === void 0 ? void 0 : _business$categories$.title,\n            rating: business.rating,\n            reviewCount: business.review_count\n          };\n        });\n      } else {\n        console.log('No businesses found', jsonResponse);\n      }\n    }).catch(error => {\n      console.error('Error fetching and parsing data', error);\n    });\n  }\n};\nexport default Yelp;","map":{"version":3,"names":["apiKey","process","env","YELP_API_KEY","Yelp","search","searchTerm","location","sortBy","fetch","headers","Authorization","then","response","ok","json","errorResponse","console","error","Error","jsonResponse","businesses","map","business","_business$categories$","id","imageSrc","image_url","name","address","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count","log","catch"],"sources":["/Users/christopherspencer/Source/Repos/ravenous/src/utils/Yelp.js"],"sourcesContent":["const apiKey = process.env.YELP_API_KEY;\n\nconst Yelp = {\n    search(searchTerm, location, sortBy) {\n      return fetch(\n        `http://localhost:3000/yelp/businesses/search?term=${searchTerm}&location=${location}&sort_by=${sortBy}`,\n        {\n          headers: {\n            Authorization: `Bearer ${apiKey}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (!response.ok) {\n          return response.json().then((errorResponse) => {\n            console.error('API error:', errorResponse);\n            throw new Error('API error');\n          });\n        }\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (jsonResponse.businesses) {\n          return jsonResponse.businesses.map((business) => {\n            return {\n              id: business.id,\n              imageSrc: business.image_url,\n              name: business.name,\n              address: business.location.address1,\n              city: business.location.city,\n              state: business.location.state,\n              zipCode: business.location.zip_code,\n              category: business.categories[0]?.title,\n              rating: business.rating,\n              reviewCount: business.review_count,\n            };\n          });\n        } else {\n          console.log('No businesses found', jsonResponse);\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching and parsing data', error);\n      });\n  },\n};\n\nexport default Yelp;"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY;AAEvC,MAAMC,IAAI,GAAG;EACTC,MAAMA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACnC,OAAOC,KAAK,CACT,qDAAoDH,UAAW,aAAYC,QAAS,YAAWC,MAAO,EAAC,EACxG;MACEE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASX,MAAO;MAClC;IACF,CACF,CAAC,CACAY,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,aAAa,IAAK;UAC7CC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEF,aAAa,CAAC;UAC1C,MAAM,IAAIG,KAAK,CAAC,WAAW,CAAC;QAC9B,CAAC,CAAC;MACJ;MACA,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDH,IAAI,CAAEQ,YAAY,IAAK;MACtB,IAAIA,YAAY,CAACC,UAAU,EAAE;QAC3B,OAAOD,YAAY,CAACC,UAAU,CAACC,GAAG,CAAEC,QAAQ,IAAK;UAAA,IAAAC,qBAAA;UAC/C,OAAO;YACLC,EAAE,EAAEF,QAAQ,CAACE,EAAE;YACfC,QAAQ,EAAEH,QAAQ,CAACI,SAAS;YAC5BC,IAAI,EAAEL,QAAQ,CAACK,IAAI;YACnBC,OAAO,EAAEN,QAAQ,CAAChB,QAAQ,CAACuB,QAAQ;YACnCC,IAAI,EAAER,QAAQ,CAAChB,QAAQ,CAACwB,IAAI;YAC5BC,KAAK,EAAET,QAAQ,CAAChB,QAAQ,CAACyB,KAAK;YAC9BC,OAAO,EAAEV,QAAQ,CAAChB,QAAQ,CAAC2B,QAAQ;YACnCC,QAAQ,GAAAX,qBAAA,GAAED,QAAQ,CAACa,UAAU,CAAC,CAAC,CAAC,cAAAZ,qBAAA,uBAAtBA,qBAAA,CAAwBa,KAAK;YACvCC,MAAM,EAAEf,QAAQ,CAACe,MAAM;YACvBC,WAAW,EAAEhB,QAAQ,CAACiB;UACxB,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,MAAM;QACLvB,OAAO,CAACwB,GAAG,CAAC,qBAAqB,EAAErB,YAAY,CAAC;MAClD;IACF,CAAC,CAAC,CACDsB,KAAK,CAAExB,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,CAAC;EACN;AACF,CAAC;AAED,eAAed,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}