{"ast":null,"code":"const apiKey = \"b7RJuDNmlM9_qAo_rkKRHEtPsIzf3h4lebmp41B5cfXmBHQmqc0qgwwtOJf8vo2bqYHFGbK5dRXDRqtXejS3t-cxf9rIDC8j-kvWkyNuV7zwMuj5nKe1g3tEKSrvZXYx\";\nconst Yelp = {\n  search(searchTerm, location, sortBy) {\n    //const apiKey = process.env.YELP_API_KEY;\n\n    if (!apiKey) {\n      throw new Error('YELP_API_KEY environment variable is missing.');\n    }\n    return fetch(`https://api.yelp.com/v3/businesses/search?term=${searchTerm}&location=${location}&sort_by=${sortBy}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business => ({\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count\n        }));\n      } else {\n        throw new Error('Unexpected response from Yelp API.');\n      }\n    }).catch(error => {\n      console.error('Error fetching data from Yelp API:', error);\n      throw error; // Rethrow the error to be caught by the caller\n    });\n  }\n};\nexport default Yelp;","map":{"version":3,"names":["apiKey","Yelp","search","searchTerm","location","sortBy","Error","fetch","headers","Authorization","then","response","ok","json","jsonResponse","businesses","map","business","id","imageSrc","image_url","name","address","address1","city","state","zipCode","zip_code","category","categories","title","rating","reviewCount","review_count","catch","error","console"],"sources":["/Users/christopherspencer/Source/Repos/ravenous/src/utils/Yelp.js"],"sourcesContent":["const apiKey = \"b7RJuDNmlM9_qAo_rkKRHEtPsIzf3h4lebmp41B5cfXmBHQmqc0qgwwtOJf8vo2bqYHFGbK5dRXDRqtXejS3t-cxf9rIDC8j-kvWkyNuV7zwMuj5nKe1g3tEKSrvZXYx\";\n\nconst Yelp = {\n    search(searchTerm, location, sortBy) {\n        //const apiKey = process.env.YELP_API_KEY;\n\n        if (!apiKey) {\n            throw new Error('YELP_API_KEY environment variable is missing.');\n        }\n\n        return fetch(\n            `https://api.yelp.com/v3/businesses/search?term=${searchTerm}&location=${location}&sort_by=${sortBy}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                }\n            }\n        )\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok.');\n            }\n            return response.json();\n        })\n        .then((jsonResponse) => {\n            if (jsonResponse.businesses) {\n                return jsonResponse.businesses.map((business) => ({\n                    id: business.id,\n                    imageSrc: business.image_url,\n                    name: business.name,\n                    address: business.location.address1,\n                    city: business.location.city,\n                    state: business.location.state,\n                    zipCode: business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewCount: business.review_count\n                }));\n            } else {\n                throw new Error('Unexpected response from Yelp API.');\n            }\n        })\n        .catch((error) => {\n            console.error('Error fetching data from Yelp API:', error);\n            throw error; // Rethrow the error to be caught by the caller\n        });\n    }\n};\n\nexport default Yelp;"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kIAAkI;AAEjJ,MAAMC,IAAI,GAAG;EACTC,MAAMA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACjC;;IAEA,IAAI,CAACL,MAAM,EAAE;MACT,MAAM,IAAIM,KAAK,CAAC,+CAA+C,CAAC;IACpE;IAEA,OAAOC,KAAK,CACP,kDAAiDJ,UAAW,aAAYC,QAAS,YAAWC,MAAO,EAAC,EACrG;MACIG,OAAO,EAAE;QACLC,aAAa,EAAG,UAAST,MAAO;MACpC;IACJ,CACJ,CAAC,CACAU,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIN,KAAK,CAAC,8BAA8B,CAAC;MACnD;MACA,OAAOK,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDH,IAAI,CAAEI,YAAY,IAAK;MACpB,IAAIA,YAAY,CAACC,UAAU,EAAE;QACzB,OAAOD,YAAY,CAACC,UAAU,CAACC,GAAG,CAAEC,QAAQ,KAAM;UAC9CC,EAAE,EAAED,QAAQ,CAACC,EAAE;UACfC,QAAQ,EAAEF,QAAQ,CAACG,SAAS;UAC5BC,IAAI,EAAEJ,QAAQ,CAACI,IAAI;UACnBC,OAAO,EAAEL,QAAQ,CAACb,QAAQ,CAACmB,QAAQ;UACnCC,IAAI,EAAEP,QAAQ,CAACb,QAAQ,CAACoB,IAAI;UAC5BC,KAAK,EAAER,QAAQ,CAACb,QAAQ,CAACqB,KAAK;UAC9BC,OAAO,EAAET,QAAQ,CAACb,QAAQ,CAACuB,QAAQ;UACnCC,QAAQ,EAAEX,QAAQ,CAACY,UAAU,CAAC,CAAC,CAAC,CAACC,KAAK;UACtCC,MAAM,EAAEd,QAAQ,CAACc,MAAM;UACvBC,WAAW,EAAEf,QAAQ,CAACgB;QAC1B,CAAC,CAAC,CAAC;MACP,CAAC,MAAM;QACH,MAAM,IAAI3B,KAAK,CAAC,oCAAoC,CAAC;MACzD;IACJ,CAAC,CAAC,CACD4B,KAAK,CAAEC,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK,CAAC,CAAC;IACjB,CAAC,CAAC;EACN;AACJ,CAAC;AAED,eAAelC,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}