{"ast":null,"code":"const apiKey = process.env.YELP_API_KEY;\nexport default async function yelp(searchTerm, location, sortOption, api_key) {\n  const baseUrl = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search`;\n  const url = `${baseUrl}?location=${location}&term=${searchTerm}`;\n  const urlWithSort = `${baseUrl}?location=${location}&term=${searchTerm}&sort_by=${sortOption}`;\n  const options = {\n    method: 'GET',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Authorization': api_key\n    }\n  };\n  try {\n    const response = await fetch(sortOption === 'no' ? url : urlWithSort, options);\n    const data = await response.json();\n    if (data.businesses && Array.isArray(data.businesses) && data.businesses.length > 0) {\n      return data.businesses;\n    } else {\n      return [];\n    }\n  } catch (err) {\n    // Log and handle the error appropriately\n    console.error('Failed to fetch data from Yelp API:', err);\n    throw new Error('Failed to fetch data from Yelp API');\n  }\n}","map":{"version":3,"names":["apiKey","process","env","YELP_API_KEY","yelp","searchTerm","location","sortOption","api_key","baseUrl","url","urlWithSort","options","method","headers","response","fetch","data","json","businesses","Array","isArray","length","err","console","error","Error"],"sources":["/Users/christopherspencer/Source/Repos/ravenous/src/utils/Yelp.js"],"sourcesContent":["const apiKey = process.env.YELP_API_KEY;\n\nexport default async function yelp(searchTerm, location, sortOption, api_key) {\n    const baseUrl = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search`;\n    const url = `${baseUrl}?location=${location}&term=${searchTerm}`;\n    const urlWithSort = `${baseUrl}?location=${location}&term=${searchTerm}&sort_by=${sortOption}`;\n  \n    const options = {\n      method: 'GET',\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': api_key\n      },\n    };\n  \n    try {\n      const response = await fetch(sortOption === 'no' ? url : urlWithSort, options);\n      const data = await response.json();\n      \n      if (data.businesses && Array.isArray(data.businesses) && data.businesses.length > 0) {\n        return data.businesses;\n      } else {\n        \n        return [];\n      }\n    } catch (err) {\n      // Log and handle the error appropriately\n      console.error('Failed to fetch data from Yelp API:', err);\n      throw new Error('Failed to fetch data from Yelp API');\n    }\n  }\n  "],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,YAAY;AAEvC,eAAe,eAAeC,IAAIA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC1E,MAAMC,OAAO,GAAI,+EAA8E;EAC/F,MAAMC,GAAG,GAAI,GAAED,OAAQ,aAAYH,QAAS,SAAQD,UAAW,EAAC;EAChE,MAAMM,WAAW,GAAI,GAAEF,OAAQ,aAAYH,QAAS,SAAQD,UAAW,YAAWE,UAAW,EAAC;EAE9F,MAAMK,OAAO,GAAG;IACdC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,6BAA6B,EAAE,GAAG;MAClC,eAAe,EAAEN;IACnB;EACF,CAAC;EAED,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACT,UAAU,KAAK,IAAI,GAAGG,GAAG,GAAGC,WAAW,EAAEC,OAAO,CAAC;IAC9E,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,UAAU,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACE,UAAU,CAAC,IAAIF,IAAI,CAACE,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;MACnF,OAAOL,IAAI,CAACE,UAAU;IACxB,CAAC,MAAM;MAEL,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZ;IACAC,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;IACzD,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;EACvD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}